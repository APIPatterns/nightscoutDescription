openapi: 3.0.0
info:
  title: Nightscout API
  version: 3.0.3
  description: |2
        Nightscout API v3 is a component of cgm-remote-monitor project. It aims to provide lightweight, secured and HTTP REST compliant interface for your T1D treatment data exchange.

        API v3 uses these environment variables, among other things&#58;
        - Security switch (optional, default = `true`)
        <pre>API3_SECURITY_ENABLE=true</pre>
        You can turn the whole security mechanism off, e.g. for debugging or development purposes,
        but this should never be set to false in production.
        - Maximum limit count of documents retrieved from single query
          <pre>API3_MAX_LIMIT=1000</pre>
        - Autopruning of obsolete documents (optional, default is only `DEVICESTATUS`=60)
          <pre>API3_AUTOPRUNE_DEVICESTATUS=60

          API3_AUTOPRUNE_ENTRIES=365

          API3_AUTOPRUNE_TREATMENTS=120
          </pre>
          You can specify for which collections autopruning will be activated and length of retention period in days, e.g. "Hold 60 days of devicestatus, automatically delete older documents, hold 365 days of treatments and entries, automatically delete older documents."


        - Fallback deduplication switch (optional, default = true)
          <pre>API3_DEDUP_FALLBACK_ENABLED=true</pre>
          API3 uses the `identifier` field for document identification and mutual distinction within a single collection. There is automatic deduplication implemented matching the equal `identifier` field. E.g. `CREATE` operation for document having the same `identifier` as another one existing in the database is automatically transformed into `UPDATE` operation of the document found in the database.

          Documents not created via API v3 usually does not have any `identifier` field, but we would like to have some form of deduplication for them, too. This fallback deduplication is turned on by having set `API3_DEDUP_FALLBACK_ENABLED` to `true`.
          When searching the collection in database, the document is found to be a duplicate only when either he has equal `identifier` or he has no `identifier` and meets&#58;
          <pre>`devicestatus` collection&#58; equal combination of `created_at` and `device`

          `entries` collection&#58;      equal combination of `date` and `type`

          `food` collection&#58;         equal `created_at`

          `profile` collection&#58;      equal `created_at`

          `treatments` collection&#58;   equal combination of `created_at` and `eventType`
          </pre>


        - Fallback switch for adding `created_at` field along the `date` field (optional, default = true)
          <pre>API3_CREATED_AT_FALLBACK_ENABLED=true</pre>
          Standard APIv3 document model uses only `date` field for storing a timestamp of the event recorded by the document. But there is a fallback option to fill `created_at` field as well automatically on each insert/update, just to keep all older components working.
tags: []
paths:
  /v2/properties:
    get:
      operationId: v2_getProperties
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
  /v2/properties/{properties}:
    get:
      operationId: v2_getSelectedProperties
      parameters:
        - name: properties
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
  /v3/devicestatus:
    post:
      operationId: deviceStatusDocument_create
      summary: 'CREATE: Inserts a new document into the collection'
      description: >-
        Using this operation you can insert new documents into collection.
        Normally the operation ends with 201 HTTP status code, `Last-Modified`
        and `Location` headers specified.

        `identifier` is included in response body or it can be parsed from the
        `Location` response header.

        When the document to post is marked as a duplicate (using rules
        described at `API3_DEDUP_FALLBACK_ENABLED` switch), the update operation
        takes place instead of inserting. In this case the original document in
        the collection is found and it gets updated by the actual operation POST
        body. Finally the operation ends with 200 HTTP status code along with
        `Last-Modified` and correct `Location` headers. The response body then
        includes `isDeduplication`=`true` and `deduplicatedIdentifier` fields.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `create` (and/or `update` for deduplication)
        permission for the API and the collection (e.g. `api:treatments:create`
        and `api:treatments:update`)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceStatus'
    get:
      operationId: deviceStatusDocument_search
      summary: 'SEARCH: Search documents from the collection'
      description: >-
        General search operation through documents of one collection, matching
        the specified filtering criteria. You can apply&#58;
                1) filtering - combining any number of filtering parameters
                2) ordering - using `sort` or `sort$desc` parameter
                3) paging - using `limit` and `skip` parameters

                If successful, HTTP 200 code is returned with JSON array of matching documents as a response content (it may be empty).
                This operation requires `read` permission for the API and the collection (e.g. `*:*:read`, `api:*:read`, `*:treatments:read`, `api:treatments:read`).
                The only exception is the `settings` collection which requires `admin` permission (`api:settings:admin`), because the settings of each application should be isolated and kept secret. You need to know the concrete identifier to access the app's settings.
      parameters:
        - name: filter_parameters
          in: query
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: true
          schema:
            type: string
        - name: sort$desc
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStatus'
                    x-cadl-name: DeviceStatus[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<DeviceStatus>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
  /v3/devicestatus/history:
    get:
      operationId: deviceStatusDocument_getCollectionHistory
      summary: 'HISTORY: Retrieves incremental changes since dateTime in header'
      description: >
        HISTORY operation is intended for continuous data synchronization with
        other systems.


        Every insertion, update and deletion will be included in the resulting
        JSON array of documents (since timestamp in `Last-Modified` request
        header value). All changes are listed chronologically in response with
        200 HTTP status code. The maximum listed `srvModified` timestamp is also
        stored in `Last-Modified` and `ETag` response headers that you can use
        for future, directly following synchronization. You can also limit the
        array's length using `limit` parameter.

        Deleted documents will appear with `isValid` = `false` field.

        HISTORY operation has a fallback mechanism in place for documents, which
        were not created by API v3. For such documents `srvModified` is
        virtually assigned from the `date` field (for `entries` collection) or
        from the `created_at` field (for other collections).

        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)

        The only exception is the `settings` collection which requires `admin`
        permission (`api:settings:admin`), because the settings of each
        application should be isolated and kept secret. You need to know the
        concrete identifier to access the app's settings.
      parameters:
        - name: Last-Modified
          in: header
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStatus'
                    x-cadl-name: DeviceStatus[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<DeviceStatus>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/devicestatus/history/{lastModified}}:
    get:
      operationId: deviceStatusDocument_history2
      summary: 'HISTORY: Retrieves incremental changes since timestamp in path'
      parameters:
        - name: lastModified
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStatus'
                    x-cadl-name: DeviceStatus[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<DeviceStatus>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/devicestatus/{identifier}:
    get:
      operationId: deviceStatusDocument_read
      summary: 'READ: Retrieves a single document from the collection'
      description: >-
        Basically this operation looks for a document matching the `identifier`
        field returning 200 or 404 HTTP status code.


        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.


        When `If-Modified-Since` header is used and its value is greater than
        the timestamp of the document in the collection, 304 HTTP status code
        with empty response content is returned. It means that the document has
        not been modified on server since the last retrieval to client side.

        With `If-Modified-Since` header and less or equal timestamp
        `srvModified` a normal 200 HTTP status with full response is returned.


        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/DeviceStatus'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<DeviceStatus>
        '304':
          description: >-
            The client has made a conditional request and the resource has not
            been modified.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
    put:
      operationId: deviceStatusDocument_update
      summary: 'UPDATE: Updates a document in the collection'
      description: >
        Normally the document with the matching `identifier` will be replaced in
        the collection by the whole JSON request body and 200 HTTP status code
        will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then an insert operation takes place instead of updating. Finally 201
        HTTP status code is returned with only `Last-Modified` header
        (`identifier` is already known from the path parameter).

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        This operation provides autopruning of the collection (if autopruning is
        enabled).


        This operation requires `update` (and/or `create`) permission for the
        API and the collection (e.g. `api:treatments:update` and
        `api:treatments:create`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    patch:
      operationId: deviceStatusDocument_patch
      summary: 'PATCH: Partially updates document in the collection'
      description: >-
        Normally the document with the matching `identifier` will be retrieved
        from the collection and it will be patched by all specified fields from
        the JSON request body. Finally 200 HTTP status code will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then the operation ends with 404 HTTP status code.

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        `PATCH` operation can save some bandwidth for incremental document
        updates in comparison with `GET` - `UPDATE` operation sequence.

        While patching the document, the field `modifiedBy` is automatically set
        to the authorized subject's name.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `update` permission for the API and the
        collection (e.g. `api:treatments:update`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    delete:
      operationId: deviceStatusDocument_delete
      summary: 'DELETE: Deletes a document from the collection'
      description: >-
        If the document has already been deleted, the operation will succeed
        anyway. Normally, documents are not really deleted from the collection
        but they are only marked as deleted. For special cases the deletion can
        be irreversible using `permanent` parameter.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `delete` permission for the API and the
        collection (e.g. `api:treatments:delete`)
      parameters:
        - name: permanent
          in: query
          required: true
          schema:
            type: boolean
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: number
                    enum:
                      - 200
                required:
                  - status
                  - result
                x-cadl-name: OkResult<200>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
  /v3/entries:
    post:
      operationId: entryDocument_create
      summary: 'CREATE: Inserts a new document into the collection'
      description: >-
        Using this operation you can insert new documents into collection.
        Normally the operation ends with 201 HTTP status code, `Last-Modified`
        and `Location` headers specified.

        `identifier` is included in response body or it can be parsed from the
        `Location` response header.

        When the document to post is marked as a duplicate (using rules
        described at `API3_DEDUP_FALLBACK_ENABLED` switch), the update operation
        takes place instead of inserting. In this case the original document in
        the collection is found and it gets updated by the actual operation POST
        body. Finally the operation ends with 200 HTTP status code along with
        `Last-Modified` and correct `Location` headers. The response body then
        includes `isDeduplication`=`true` and `deduplicatedIdentifier` fields.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `create` (and/or `update` for deduplication)
        permission for the API and the collection (e.g. `api:treatments:create`
        and `api:treatments:update`)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
    get:
      operationId: entryDocument_search
      summary: 'SEARCH: Search documents from the collection'
      description: >-
        General search operation through documents of one collection, matching
        the specified filtering criteria. You can apply&#58;
                1) filtering - combining any number of filtering parameters
                2) ordering - using `sort` or `sort$desc` parameter
                3) paging - using `limit` and `skip` parameters

                If successful, HTTP 200 code is returned with JSON array of matching documents as a response content (it may be empty).
                This operation requires `read` permission for the API and the collection (e.g. `*:*:read`, `api:*:read`, `*:treatments:read`, `api:treatments:read`).
                The only exception is the `settings` collection which requires `admin` permission (`api:settings:admin`), because the settings of each application should be isolated and kept secret. You need to know the concrete identifier to access the app's settings.
      parameters:
        - name: filter_parameters
          in: query
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: true
          schema:
            type: string
        - name: sort$desc
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entry'
                    x-cadl-name: Entry[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Entry>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
  /v3/entries/history:
    get:
      operationId: entryDocument_getCollectionHistory
      summary: 'HISTORY: Retrieves incremental changes since dateTime in header'
      description: >
        HISTORY operation is intended for continuous data synchronization with
        other systems.


        Every insertion, update and deletion will be included in the resulting
        JSON array of documents (since timestamp in `Last-Modified` request
        header value). All changes are listed chronologically in response with
        200 HTTP status code. The maximum listed `srvModified` timestamp is also
        stored in `Last-Modified` and `ETag` response headers that you can use
        for future, directly following synchronization. You can also limit the
        array's length using `limit` parameter.

        Deleted documents will appear with `isValid` = `false` field.

        HISTORY operation has a fallback mechanism in place for documents, which
        were not created by API v3. For such documents `srvModified` is
        virtually assigned from the `date` field (for `entries` collection) or
        from the `created_at` field (for other collections).

        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)

        The only exception is the `settings` collection which requires `admin`
        permission (`api:settings:admin`), because the settings of each
        application should be isolated and kept secret. You need to know the
        concrete identifier to access the app's settings.
      parameters:
        - name: Last-Modified
          in: header
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entry'
                    x-cadl-name: Entry[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Entry>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/entries/history/{lastModified}}:
    get:
      operationId: entryDocument_history2
      summary: 'HISTORY: Retrieves incremental changes since timestamp in path'
      parameters:
        - name: lastModified
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entry'
                    x-cadl-name: Entry[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Entry>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/entries/{identifier}:
    get:
      operationId: entryDocument_read
      summary: 'READ: Retrieves a single document from the collection'
      description: >-
        Basically this operation looks for a document matching the `identifier`
        field returning 200 or 404 HTTP status code.


        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.


        When `If-Modified-Since` header is used and its value is greater than
        the timestamp of the document in the collection, 304 HTTP status code
        with empty response content is returned. It means that the document has
        not been modified on server since the last retrieval to client side.

        With `If-Modified-Since` header and less or equal timestamp
        `srvModified` a normal 200 HTTP status with full response is returned.


        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/Entry'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<Entry>
        '304':
          description: >-
            The client has made a conditional request and the resource has not
            been modified.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
    put:
      operationId: entryDocument_update
      summary: 'UPDATE: Updates a document in the collection'
      description: >
        Normally the document with the matching `identifier` will be replaced in
        the collection by the whole JSON request body and 200 HTTP status code
        will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then an insert operation takes place instead of updating. Finally 201
        HTTP status code is returned with only `Last-Modified` header
        (`identifier` is already known from the path parameter).

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        This operation provides autopruning of the collection (if autopruning is
        enabled).


        This operation requires `update` (and/or `create`) permission for the
        API and the collection (e.g. `api:treatments:update` and
        `api:treatments:create`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    patch:
      operationId: entryDocument_patch
      summary: 'PATCH: Partially updates document in the collection'
      description: >-
        Normally the document with the matching `identifier` will be retrieved
        from the collection and it will be patched by all specified fields from
        the JSON request body. Finally 200 HTTP status code will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then the operation ends with 404 HTTP status code.

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        `PATCH` operation can save some bandwidth for incremental document
        updates in comparison with `GET` - `UPDATE` operation sequence.

        While patching the document, the field `modifiedBy` is automatically set
        to the authorized subject's name.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `update` permission for the API and the
        collection (e.g. `api:treatments:update`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    delete:
      operationId: entryDocument_delete
      summary: 'DELETE: Deletes a document from the collection'
      description: >-
        If the document has already been deleted, the operation will succeed
        anyway. Normally, documents are not really deleted from the collection
        but they are only marked as deleted. For special cases the deletion can
        be irreversible using `permanent` parameter.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `delete` permission for the API and the
        collection (e.g. `api:treatments:delete`)
      parameters:
        - name: permanent
          in: query
          required: true
          schema:
            type: boolean
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: number
                    enum:
                      - 200
                required:
                  - status
                  - result
                x-cadl-name: OkResult<200>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
  /v3/food:
    post:
      operationId: foodDocument_create
      summary: 'CREATE: Inserts a new document into the collection'
      description: >-
        Using this operation you can insert new documents into collection.
        Normally the operation ends with 201 HTTP status code, `Last-Modified`
        and `Location` headers specified.

        `identifier` is included in response body or it can be parsed from the
        `Location` response header.

        When the document to post is marked as a duplicate (using rules
        described at `API3_DEDUP_FALLBACK_ENABLED` switch), the update operation
        takes place instead of inserting. In this case the original document in
        the collection is found and it gets updated by the actual operation POST
        body. Finally the operation ends with 200 HTTP status code along with
        `Last-Modified` and correct `Location` headers. The response body then
        includes `isDeduplication`=`true` and `deduplicatedIdentifier` fields.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `create` (and/or `update` for deduplication)
        permission for the API and the collection (e.g. `api:treatments:create`
        and `api:treatments:update`)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
    get:
      operationId: foodDocument_search
      summary: 'SEARCH: Search documents from the collection'
      description: >-
        General search operation through documents of one collection, matching
        the specified filtering criteria. You can apply&#58;
                1) filtering - combining any number of filtering parameters
                2) ordering - using `sort` or `sort$desc` parameter
                3) paging - using `limit` and `skip` parameters

                If successful, HTTP 200 code is returned with JSON array of matching documents as a response content (it may be empty).
                This operation requires `read` permission for the API and the collection (e.g. `*:*:read`, `api:*:read`, `*:treatments:read`, `api:treatments:read`).
                The only exception is the `settings` collection which requires `admin` permission (`api:settings:admin`), because the settings of each application should be isolated and kept secret. You need to know the concrete identifier to access the app's settings.
      parameters:
        - name: filter_parameters
          in: query
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: true
          schema:
            type: string
        - name: sort$desc
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Food'
                    x-cadl-name: Food[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Food>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
  /v3/food/history:
    get:
      operationId: foodDocument_getCollectionHistory
      summary: 'HISTORY: Retrieves incremental changes since dateTime in header'
      description: >
        HISTORY operation is intended for continuous data synchronization with
        other systems.


        Every insertion, update and deletion will be included in the resulting
        JSON array of documents (since timestamp in `Last-Modified` request
        header value). All changes are listed chronologically in response with
        200 HTTP status code. The maximum listed `srvModified` timestamp is also
        stored in `Last-Modified` and `ETag` response headers that you can use
        for future, directly following synchronization. You can also limit the
        array's length using `limit` parameter.

        Deleted documents will appear with `isValid` = `false` field.

        HISTORY operation has a fallback mechanism in place for documents, which
        were not created by API v3. For such documents `srvModified` is
        virtually assigned from the `date` field (for `entries` collection) or
        from the `created_at` field (for other collections).

        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)

        The only exception is the `settings` collection which requires `admin`
        permission (`api:settings:admin`), because the settings of each
        application should be isolated and kept secret. You need to know the
        concrete identifier to access the app's settings.
      parameters:
        - name: Last-Modified
          in: header
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Food'
                    x-cadl-name: Food[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Food>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/food/history/{lastModified}}:
    get:
      operationId: foodDocument_history2
      summary: 'HISTORY: Retrieves incremental changes since timestamp in path'
      parameters:
        - name: lastModified
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Food'
                    x-cadl-name: Food[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Food>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/food/{identifier}:
    get:
      operationId: foodDocument_read
      summary: 'READ: Retrieves a single document from the collection'
      description: >-
        Basically this operation looks for a document matching the `identifier`
        field returning 200 or 404 HTTP status code.


        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.


        When `If-Modified-Since` header is used and its value is greater than
        the timestamp of the document in the collection, 304 HTTP status code
        with empty response content is returned. It means that the document has
        not been modified on server since the last retrieval to client side.

        With `If-Modified-Since` header and less or equal timestamp
        `srvModified` a normal 200 HTTP status with full response is returned.


        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/Food'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<Food>
        '304':
          description: >-
            The client has made a conditional request and the resource has not
            been modified.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
    put:
      operationId: foodDocument_update
      summary: 'UPDATE: Updates a document in the collection'
      description: >
        Normally the document with the matching `identifier` will be replaced in
        the collection by the whole JSON request body and 200 HTTP status code
        will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then an insert operation takes place instead of updating. Finally 201
        HTTP status code is returned with only `Last-Modified` header
        (`identifier` is already known from the path parameter).

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        This operation provides autopruning of the collection (if autopruning is
        enabled).


        This operation requires `update` (and/or `create`) permission for the
        API and the collection (e.g. `api:treatments:update` and
        `api:treatments:create`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    patch:
      operationId: foodDocument_patch
      summary: 'PATCH: Partially updates document in the collection'
      description: >-
        Normally the document with the matching `identifier` will be retrieved
        from the collection and it will be patched by all specified fields from
        the JSON request body. Finally 200 HTTP status code will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then the operation ends with 404 HTTP status code.

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        `PATCH` operation can save some bandwidth for incremental document
        updates in comparison with `GET` - `UPDATE` operation sequence.

        While patching the document, the field `modifiedBy` is automatically set
        to the authorized subject's name.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `update` permission for the API and the
        collection (e.g. `api:treatments:update`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    delete:
      operationId: foodDocument_delete
      summary: 'DELETE: Deletes a document from the collection'
      description: >-
        If the document has already been deleted, the operation will succeed
        anyway. Normally, documents are not really deleted from the collection
        but they are only marked as deleted. For special cases the deletion can
        be irreversible using `permanent` parameter.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `delete` permission for the API and the
        collection (e.g. `api:treatments:delete`)
      parameters:
        - name: permanent
          in: query
          required: true
          schema:
            type: boolean
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: number
                    enum:
                      - 200
                required:
                  - status
                  - result
                x-cadl-name: OkResult<200>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
  /v3/lastmodified:
    get:
      operationId: v3_getLastModified
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/LastModifiedResult'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<LastModifiedResult>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
  /v3/profile:
    post:
      operationId: profileDocument_create
      summary: 'CREATE: Inserts a new document into the collection'
      description: >-
        Using this operation you can insert new documents into collection.
        Normally the operation ends with 201 HTTP status code, `Last-Modified`
        and `Location` headers specified.

        `identifier` is included in response body or it can be parsed from the
        `Location` response header.

        When the document to post is marked as a duplicate (using rules
        described at `API3_DEDUP_FALLBACK_ENABLED` switch), the update operation
        takes place instead of inserting. In this case the original document in
        the collection is found and it gets updated by the actual operation POST
        body. Finally the operation ends with 200 HTTP status code along with
        `Last-Modified` and correct `Location` headers. The response body then
        includes `isDeduplication`=`true` and `deduplicatedIdentifier` fields.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `create` (and/or `update` for deduplication)
        permission for the API and the collection (e.g. `api:treatments:create`
        and `api:treatments:update`)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
    get:
      operationId: profileDocument_search
      summary: 'SEARCH: Search documents from the collection'
      description: >-
        General search operation through documents of one collection, matching
        the specified filtering criteria. You can apply&#58;
                1) filtering - combining any number of filtering parameters
                2) ordering - using `sort` or `sort$desc` parameter
                3) paging - using `limit` and `skip` parameters

                If successful, HTTP 200 code is returned with JSON array of matching documents as a response content (it may be empty).
                This operation requires `read` permission for the API and the collection (e.g. `*:*:read`, `api:*:read`, `*:treatments:read`, `api:treatments:read`).
                The only exception is the `settings` collection which requires `admin` permission (`api:settings:admin`), because the settings of each application should be isolated and kept secret. You need to know the concrete identifier to access the app's settings.
      parameters:
        - name: filter_parameters
          in: query
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: true
          schema:
            type: string
        - name: sort$desc
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                    x-cadl-name: Profile[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Profile>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
  /v3/profile/history:
    get:
      operationId: profileDocument_getCollectionHistory
      summary: 'HISTORY: Retrieves incremental changes since dateTime in header'
      description: >
        HISTORY operation is intended for continuous data synchronization with
        other systems.


        Every insertion, update and deletion will be included in the resulting
        JSON array of documents (since timestamp in `Last-Modified` request
        header value). All changes are listed chronologically in response with
        200 HTTP status code. The maximum listed `srvModified` timestamp is also
        stored in `Last-Modified` and `ETag` response headers that you can use
        for future, directly following synchronization. You can also limit the
        array's length using `limit` parameter.

        Deleted documents will appear with `isValid` = `false` field.

        HISTORY operation has a fallback mechanism in place for documents, which
        were not created by API v3. For such documents `srvModified` is
        virtually assigned from the `date` field (for `entries` collection) or
        from the `created_at` field (for other collections).

        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)

        The only exception is the `settings` collection which requires `admin`
        permission (`api:settings:admin`), because the settings of each
        application should be isolated and kept secret. You need to know the
        concrete identifier to access the app's settings.
      parameters:
        - name: Last-Modified
          in: header
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                    x-cadl-name: Profile[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Profile>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/profile/history/{lastModified}}:
    get:
      operationId: profileDocument_history2
      summary: 'HISTORY: Retrieves incremental changes since timestamp in path'
      parameters:
        - name: lastModified
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                    x-cadl-name: Profile[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Profile>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/profile/{identifier}:
    get:
      operationId: profileDocument_read
      summary: 'READ: Retrieves a single document from the collection'
      description: >-
        Basically this operation looks for a document matching the `identifier`
        field returning 200 or 404 HTTP status code.


        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.


        When `If-Modified-Since` header is used and its value is greater than
        the timestamp of the document in the collection, 304 HTTP status code
        with empty response content is returned. It means that the document has
        not been modified on server since the last retrieval to client side.

        With `If-Modified-Since` header and less or equal timestamp
        `srvModified` a normal 200 HTTP status with full response is returned.


        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/Profile'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<Profile>
        '304':
          description: >-
            The client has made a conditional request and the resource has not
            been modified.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
    put:
      operationId: profileDocument_update
      summary: 'UPDATE: Updates a document in the collection'
      description: >
        Normally the document with the matching `identifier` will be replaced in
        the collection by the whole JSON request body and 200 HTTP status code
        will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then an insert operation takes place instead of updating. Finally 201
        HTTP status code is returned with only `Last-Modified` header
        (`identifier` is already known from the path parameter).

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        This operation provides autopruning of the collection (if autopruning is
        enabled).


        This operation requires `update` (and/or `create`) permission for the
        API and the collection (e.g. `api:treatments:update` and
        `api:treatments:create`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    patch:
      operationId: profileDocument_patch
      summary: 'PATCH: Partially updates document in the collection'
      description: >-
        Normally the document with the matching `identifier` will be retrieved
        from the collection and it will be patched by all specified fields from
        the JSON request body. Finally 200 HTTP status code will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then the operation ends with 404 HTTP status code.

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        `PATCH` operation can save some bandwidth for incremental document
        updates in comparison with `GET` - `UPDATE` operation sequence.

        While patching the document, the field `modifiedBy` is automatically set
        to the authorized subject's name.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `update` permission for the API and the
        collection (e.g. `api:treatments:update`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    delete:
      operationId: profileDocument_delete
      summary: 'DELETE: Deletes a document from the collection'
      description: >-
        If the document has already been deleted, the operation will succeed
        anyway. Normally, documents are not really deleted from the collection
        but they are only marked as deleted. For special cases the deletion can
        be irreversible using `permanent` parameter.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `delete` permission for the API and the
        collection (e.g. `api:treatments:delete`)
      parameters:
        - name: permanent
          in: query
          required: true
          schema:
            type: boolean
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: number
                    enum:
                      - 200
                required:
                  - status
                  - result
                x-cadl-name: OkResult<200>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
  /v3/settings:
    post:
      operationId: settingsDocument_create
      summary: 'CREATE: Inserts a new document into the collection'
      description: >-
        Using this operation you can insert new documents into collection.
        Normally the operation ends with 201 HTTP status code, `Last-Modified`
        and `Location` headers specified.

        `identifier` is included in response body or it can be parsed from the
        `Location` response header.

        When the document to post is marked as a duplicate (using rules
        described at `API3_DEDUP_FALLBACK_ENABLED` switch), the update operation
        takes place instead of inserting. In this case the original document in
        the collection is found and it gets updated by the actual operation POST
        body. Finally the operation ends with 200 HTTP status code along with
        `Last-Modified` and correct `Location` headers. The response body then
        includes `isDeduplication`=`true` and `deduplicatedIdentifier` fields.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `create` (and/or `update` for deduplication)
        permission for the API and the collection (e.g. `api:treatments:create`
        and `api:treatments:update`)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
    get:
      operationId: settingsDocument_search
      summary: 'SEARCH: Search documents from the collection'
      description: >-
        General search operation through documents of one collection, matching
        the specified filtering criteria. You can apply&#58;
                1) filtering - combining any number of filtering parameters
                2) ordering - using `sort` or `sort$desc` parameter
                3) paging - using `limit` and `skip` parameters

                If successful, HTTP 200 code is returned with JSON array of matching documents as a response content (it may be empty).
                This operation requires `read` permission for the API and the collection (e.g. `*:*:read`, `api:*:read`, `*:treatments:read`, `api:treatments:read`).
                The only exception is the `settings` collection which requires `admin` permission (`api:settings:admin`), because the settings of each application should be isolated and kept secret. You need to know the concrete identifier to access the app's settings.
      parameters:
        - name: filter_parameters
          in: query
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: true
          schema:
            type: string
        - name: sort$desc
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Settings'
                    x-cadl-name: Settings[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Settings>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
  /v3/settings/history:
    get:
      operationId: settingsDocument_getCollectionHistory
      summary: 'HISTORY: Retrieves incremental changes since dateTime in header'
      description: >
        HISTORY operation is intended for continuous data synchronization with
        other systems.


        Every insertion, update and deletion will be included in the resulting
        JSON array of documents (since timestamp in `Last-Modified` request
        header value). All changes are listed chronologically in response with
        200 HTTP status code. The maximum listed `srvModified` timestamp is also
        stored in `Last-Modified` and `ETag` response headers that you can use
        for future, directly following synchronization. You can also limit the
        array's length using `limit` parameter.

        Deleted documents will appear with `isValid` = `false` field.

        HISTORY operation has a fallback mechanism in place for documents, which
        were not created by API v3. For such documents `srvModified` is
        virtually assigned from the `date` field (for `entries` collection) or
        from the `created_at` field (for other collections).

        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)

        The only exception is the `settings` collection which requires `admin`
        permission (`api:settings:admin`), because the settings of each
        application should be isolated and kept secret. You need to know the
        concrete identifier to access the app's settings.
      parameters:
        - name: Last-Modified
          in: header
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Settings'
                    x-cadl-name: Settings[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Settings>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/settings/history/{lastModified}}:
    get:
      operationId: settingsDocument_history2
      summary: 'HISTORY: Retrieves incremental changes since timestamp in path'
      parameters:
        - name: lastModified
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Settings'
                    x-cadl-name: Settings[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Settings>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/settings/{identifier}:
    get:
      operationId: settingsDocument_read
      summary: 'READ: Retrieves a single document from the collection'
      description: >-
        Basically this operation looks for a document matching the `identifier`
        field returning 200 or 404 HTTP status code.


        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.


        When `If-Modified-Since` header is used and its value is greater than
        the timestamp of the document in the collection, 304 HTTP status code
        with empty response content is returned. It means that the document has
        not been modified on server since the last retrieval to client side.

        With `If-Modified-Since` header and less or equal timestamp
        `srvModified` a normal 200 HTTP status with full response is returned.


        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/Settings'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<Settings>
        '304':
          description: >-
            The client has made a conditional request and the resource has not
            been modified.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
    put:
      operationId: settingsDocument_update
      summary: 'UPDATE: Updates a document in the collection'
      description: >
        Normally the document with the matching `identifier` will be replaced in
        the collection by the whole JSON request body and 200 HTTP status code
        will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then an insert operation takes place instead of updating. Finally 201
        HTTP status code is returned with only `Last-Modified` header
        (`identifier` is already known from the path parameter).

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        This operation provides autopruning of the collection (if autopruning is
        enabled).


        This operation requires `update` (and/or `create`) permission for the
        API and the collection (e.g. `api:treatments:update` and
        `api:treatments:create`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    patch:
      operationId: settingsDocument_patch
      summary: 'PATCH: Partially updates document in the collection'
      description: >-
        Normally the document with the matching `identifier` will be retrieved
        from the collection and it will be patched by all specified fields from
        the JSON request body. Finally 200 HTTP status code will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then the operation ends with 404 HTTP status code.

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        `PATCH` operation can save some bandwidth for incremental document
        updates in comparison with `GET` - `UPDATE` operation sequence.

        While patching the document, the field `modifiedBy` is automatically set
        to the authorized subject's name.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `update` permission for the API and the
        collection (e.g. `api:treatments:update`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    delete:
      operationId: settingsDocument_delete
      summary: 'DELETE: Deletes a document from the collection'
      description: >-
        If the document has already been deleted, the operation will succeed
        anyway. Normally, documents are not really deleted from the collection
        but they are only marked as deleted. For special cases the deletion can
        be irreversible using `permanent` parameter.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `delete` permission for the API and the
        collection (e.g. `api:treatments:delete`)
      parameters:
        - name: permanent
          in: query
          required: true
          schema:
            type: boolean
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: number
                    enum:
                      - 200
                required:
                  - status
                  - result
                x-cadl-name: OkResult<200>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
  /v3/status:
    get:
      operationId: v3_getStatus
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/StatusResult'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<StatusResult>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
  /v3/treatment:
    post:
      operationId: treatmentDocument_create
      summary: 'CREATE: Inserts a new document into the collection'
      description: >-
        Using this operation you can insert new documents into collection.
        Normally the operation ends with 201 HTTP status code, `Last-Modified`
        and `Location` headers specified.

        `identifier` is included in response body or it can be parsed from the
        `Location` response header.

        When the document to post is marked as a duplicate (using rules
        described at `API3_DEDUP_FALLBACK_ENABLED` switch), the update operation
        takes place instead of inserting. In this case the original document in
        the collection is found and it gets updated by the actual operation POST
        body. Finally the operation ends with 200 HTTP status code along with
        `Last-Modified` and correct `Location` headers. The response body then
        includes `isDeduplication`=`true` and `deduplicatedIdentifier` fields.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `create` (and/or `update` for deduplication)
        permission for the API and the collection (e.g. `api:treatments:create`
        and `api:treatments:update`)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Treatment'
    get:
      operationId: treatmentDocument_search
      summary: 'SEARCH: Search documents from the collection'
      description: >-
        General search operation through documents of one collection, matching
        the specified filtering criteria. You can apply&#58;
                1) filtering - combining any number of filtering parameters
                2) ordering - using `sort` or `sort$desc` parameter
                3) paging - using `limit` and `skip` parameters

                If successful, HTTP 200 code is returned with JSON array of matching documents as a response content (it may be empty).
                This operation requires `read` permission for the API and the collection (e.g. `*:*:read`, `api:*:read`, `*:treatments:read`, `api:treatments:read`).
                The only exception is the `settings` collection which requires `admin` permission (`api:settings:admin`), because the settings of each application should be isolated and kept secret. You need to know the concrete identifier to access the app's settings.
      parameters:
        - name: filter_parameters
          in: query
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: true
          schema:
            type: string
        - name: sort$desc
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Treatment'
                    x-cadl-name: Treatment[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Treatment>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
  /v3/treatment/history:
    get:
      operationId: treatmentDocument_getCollectionHistory
      summary: 'HISTORY: Retrieves incremental changes since dateTime in header'
      description: >
        HISTORY operation is intended for continuous data synchronization with
        other systems.


        Every insertion, update and deletion will be included in the resulting
        JSON array of documents (since timestamp in `Last-Modified` request
        header value). All changes are listed chronologically in response with
        200 HTTP status code. The maximum listed `srvModified` timestamp is also
        stored in `Last-Modified` and `ETag` response headers that you can use
        for future, directly following synchronization. You can also limit the
        array's length using `limit` parameter.

        Deleted documents will appear with `isValid` = `false` field.

        HISTORY operation has a fallback mechanism in place for documents, which
        were not created by API v3. For such documents `srvModified` is
        virtually assigned from the `date` field (for `entries` collection) or
        from the `created_at` field (for other collections).

        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)

        The only exception is the `settings` collection which requires `admin`
        permission (`api:settings:admin`), because the settings of each
        application should be isolated and kept secret. You need to know the
        concrete identifier to access the app's settings.
      parameters:
        - name: Last-Modified
          in: header
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Treatment'
                    x-cadl-name: Treatment[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Treatment>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/treatment/history/{lastModified}}:
    get:
      operationId: treatmentDocument_history2
      summary: 'HISTORY: Retrieves incremental changes since timestamp in path'
      parameters:
        - name: lastModified
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Treatment'
                    x-cadl-name: Treatment[]
                required:
                  - status
                  - result
                x-cadl-name: OkCollectionResult<Treatment>
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
  /v3/treatment/{identifier}:
    get:
      operationId: treatmentDocument_read
      summary: 'READ: Retrieves a single document from the collection'
      description: >-
        Basically this operation looks for a document matching the `identifier`
        field returning 200 or 404 HTTP status code.


        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.


        When `If-Modified-Since` header is used and its value is greater than
        the timestamp of the document in the collection, 304 HTTP status code
        with empty response content is returned. It means that the document has
        not been modified on server since the last retrieval to client side.

        With `If-Modified-Since` header and less or equal timestamp
        `srvModified` a normal 200 HTTP status with full response is returned.


        This operation requires `read` permission for the API and the collection
        (e.g. `api:treatments:read`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
        - name: fields
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/Treatment'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<Treatment>
        '304':
          description: >-
            The client has made a conditional request and the resource has not
            been modified.
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '406':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
    put:
      operationId: treatmentDocument_update
      summary: 'UPDATE: Updates a document in the collection'
      description: >
        Normally the document with the matching `identifier` will be replaced in
        the collection by the whole JSON request body and 200 HTTP status code
        will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then an insert operation takes place instead of updating. Finally 201
        HTTP status code is returned with only `Last-Modified` header
        (`identifier` is already known from the path parameter).

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        This operation provides autopruning of the collection (if autopruning is
        enabled).


        This operation requires `update` (and/or `create`) permission for the
        API and the collection (e.g. `api:treatments:update` and
        `api:treatments:create`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    patch:
      operationId: treatmentDocument_patch
      summary: 'PATCH: Partially updates document in the collection'
      description: >-
        Normally the document with the matching `identifier` will be retrieved
        from the collection and it will be patched by all specified fields from
        the JSON request body. Finally 200 HTTP status code will be returned.

        If the document has been found in the collection but it had already been
        deleted, 410 HTTP status code is to be returned.

        When no document with `identifier` has been found in the collection,
        then the operation ends with 404 HTTP status code.

        You can also specify `If-Unmodified-Since` request header including your
        timestamp of document's last modification. If the document has been
        modified by somebody else on the server afterwards (and you do not know
        about it), the 412 HTTP status code is returned cancelling the update
        operation. You can use this feature to prevent race condition problems.

        `PATCH` operation can save some bandwidth for incremental document
        updates in comparison with `GET` - `UPDATE` operation sequence.

        While patching the document, the field `modifiedBy` is automatically set
        to the authorized subject's name.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `update` permission for the API and the
        collection (e.g. `api:treatments:update`)
      parameters:
        - name: If-Modified-Since
          in: header
          required: true
          schema:
            type: string
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedDocument'
        '201':
          description: >-
            The request has succeeded and a new resource has been created as a
            result.
          headers:
            Location:
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdDocument'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestFailedResponse'
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '410':
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoneFailedResponse'
        '412':
          description: Precondition failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<412>
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
    delete:
      operationId: treatmentDocument_delete
      summary: 'DELETE: Deletes a document from the collection'
      description: >-
        If the document has already been deleted, the operation will succeed
        anyway. Normally, documents are not really deleted from the collection
        but they are only marked as deleted. For special cases the deletion can
        be irreversible using `permanent` parameter.

        This operation provides autopruning of the collection (if autopruning is
        enabled).

        This operation requires `delete` permission for the API and the
        collection (e.g. `api:treatments:delete`)
      parameters:
        - name: permanent
          in: query
          required: true
          schema:
            type: boolean
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    type: number
                    enum:
                      - 200
                required:
                  - status
                  - result
                x-cadl-name: OkResult<200>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundFailedResponse'
        '422':
          description: Client Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                required:
                  - status
                x-cadl-name: StatusResponse<422>
  /v3/version:
    get:
      operationId: v3_getVersion
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int32
                  result:
                    $ref: '#/components/schemas/VersionResult'
                required:
                  - status
                  - result
                x-cadl-name: OkResult<VersionResult>
        '401':
          description: Access is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedFailedResponse'
        '403':
          description: Access is forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedFailedResponse'
security:
  - AccessToken: []
  - JwtToken: []
components:
  schemas:
    ApiPermissions:
      type: object
      properties:
        devicestatus:
          type: string
        entries:
          type: string
        food:
          type: string
        profile:
          type: string
        treatments:
          type: string
      required:
        - devicestatus
        - entries
        - food
        - profile
        - treatments
    BadRequestFailedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
      required:
        - status
    Cage:
      type: object
      properties:
        found:
          type: boolean
        age:
          type: integer
          format: int32
        treatmentDate:
          type: integer
          format: int64
        checkForAlert:
          type: boolean
        days:
          type: integer
          format: int32
        hours:
          type: integer
          format: int32
        notes:
          type: string
        minFractions:
          type: integer
          format: int32
        level:
          type: integer
          format: int32
        display:
          type: string
    DeviceStatus:
      type: object
      properties:
        some_property:
          type: string
      description: >-
        State of physical device, which is a technical part of the whole T1D
        compensation system
      required:
        - some_property
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
    DocumentBase:
      type: object
      properties:
        identifier:
          type: string
          description: |2-
                Main addressing, required field that identifies document in the collection. 
                The client should not create the identifier, the server automatically assigns it when the document is inserted.
                The server calculates the identifier in such a way that duplicate records are automatically merged (deduplicating is made by `date`, `device` and `eventType` fields).
                The best practise for all applications is not to loose identifiers from received documents, but save them carefully for other consumer applications/systems.
                API v3 has a fallback mechanism in place, for documents without `identifier` field the `identifier` is set to internal `_id`, when reading or addressing these documents.
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        date:
          type: integer
          format: int64
          description: |2-
                Required timestamp when the record or event occured, you can choose from three input formats
                - Unix epoch in milliseconds (1525383610088)
                - Unix epoch in seconds (1525383610)
                - ISO 8601 with optional timezone ('2018-05-03T21:40:10.088Z' or '2018-05-03T23:40:10.088+02:00')
                The date is always stored in a normalized form - UTC with zero offset. If UTC offset was present, it is going to be set in the `utcOffset` field.
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        utcOffset:
          type: integer
          format: int32
          description: |2-
                Local UTC offset (timezone) of the event in minutes. This field can be set either directly by the client (in the incoming document) or it is automatically parsed from the `date` field.
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        app:
          type: string
          description: |2-
                Application or system in which the record was entered by human or device for the first time.
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        device:
          type: string
          description: |2-
                The device from which the data originated (including serial number of the device, if it is relevant and safe).
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        _id:
          type: string
          description: '    Internally assigned database id. This field is for internal server purposes only, clients communicate with API by using identifier field.'
        srvCreated:
          type: integer
          format: int64
          description: |2-
                The server's timestamp of document insertion into the database (Unix epoch in ms). This field appears only for documents which were inserted by API v3.
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        subject:
          type: string
          description: |2-
                Name of the security subject (within Nightscout scope) which has created the document. This field is automatically set by the server from the passed token or JWT.
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        srvModified:
          type: integer
          format: int64
          description: |2-
                The server's timestamp of the last document modification in the database (Unix epoch in ms). This field appears  only for documents which were somehow modified by API v3 (inserted, updated or deleted).
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        modifiedBy:
          type: string
          description: |2-
                Name of the security subject (within Nightscout scope) which has patched or deleted the document for the last time. This field is automatically set by the server.
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        isValid:
          type: boolean
          description: |2-
                A flag set by the server only for deleted documents. This field appears
                only within history operation and for documents which were deleted by API v3 (and they always have a false value)
                Note&#58; this field is immutable by the client (it cannot be updated or patched)
        isReadOnly:
          type: boolean
          description: |2-
                A flag set by client that locks the document from any changes. Every document marked with `isReadOnly=true` is forever immutable and cannot even be deleted.
                Any attempt to modify the read-only document will end with status 422 UNPROCESSABLE ENTITY.
      required:
        - identifier
        - date
        - app
        - _id
    Entry:
      type: object
      properties:
        type:
          type: string
          description: sgv, mbg, cal, etc
        sgv:
          type: integer
          format: int32
          description: The glucose reading. (only available for sgv types)
        direction:
          type: string
          description: >-
            Direction of glucose trend reported by CGM. (only available for sgv
            types)

            Example: "DoubleDown", "SingleDown", "FortyFiveDown", "Flat",
            "FortyFiveUp", "SingleUp", "DoubleUp", "NOT COMPUTABLE", "RATE OUT
            OF RANGE" for xdrip
        noise:
          type: integer
          format: int32
          description: >-
            Noise level at time of reading. (only available for sgv types)

            Example: xdrip: 0, 1, 2=high, 3=high_for_predict, 4=very high,
            5=extreme
        filtered:
          type: integer
          format: int32
          description: >-
            The raw filtered value directly from CGM transmitter. (only
            available for sgv types)
        unfiltered:
          type: integer
          format: int32
          description: >-
            The raw unfiltered value directly from CGM transmitter. (only
            available for sgv types)
        rssi:
          type: integer
          format: int32
          description: >-
            The signal strength from CGM transmitter. (only available for sgv
            types)
        units:
          type: string
          description: >-
            The units for the glucose value, mg/dl or mmol/l. It is strongly
            recommended to fill in this field.

            Example: "mg", "mmol"
      description: Blood glucose measurements and CGM calibrations
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
    Food:
      type: object
      properties:
        food:
          type: string
          description: food, quickpick
        category:
          type: string
          description: Name for a group of related records
        subcategory:
          type: string
          description: Name for a second level of groupping
        name:
          type: string
          description: Name of the food described
        portion:
          type: number
          format: float
          description: Number of units (e.g. grams) of the whole portion described
        unit:
          type: string
          description: g, ml, oz
        carbs:
          type: number
          format: float
          description: Amount of carbs in the portion in grams
        fat:
          type: number
          format: float
          description: Amount of fat in the portion in grams
        protein:
          type: number
          format: float
          description: Amount of proteins in the portion in grams
        energy:
          type: number
          format: float
          description: Amount of energy in the portion in kJ
        gi:
          type: number
          format: float
          description: Glycemic index (1=low, 2=medium, 3=high)
        hideafteruse:
          type: boolean
          description: Flag used for quickpick
        hidden:
          type: boolean
          description: Flag used for quickpick
        position:
          type: number
          format: float
          description: Ordering field for quickpick
        portions:
          type: number
          format: float
          description: component multiplier if defined inside quickpick compound
      description: Nutritional values of food
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
    GoneFailedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
      required:
        - status
    LastModdifiedCollections:
      type: object
      properties:
        devicestatus:
          type: integer
          format: int64
          description: >-
            Timestamp of the last modification (Unix epoch in ms), `null` when
            there is no timestamp found.
        treatments:
          type: integer
          format: int64
          description: >-
            Timestamp of the last modification (Unix epoch in ms), `null` when
            there is no timestamp found.
        entries:
          type: integer
          format: int64
          description: >-
            Timestamp of the last modification (Unix epoch in ms), `null` when
            there is no timestamp found.
        profile:
          type: integer
          format: int64
          description: >-
            Timestamp of the last modification (Unix epoch in ms), `null` when
            there is no timestamp found.
      required:
        - devicestatus
        - treatments
        - entries
        - profile
    LastModifiedResult:
      type: object
      properties:
        srvDate:
          type: integer
          format: int64
          description: Actual storage server date (Unix epoch in ms).
        collections:
          allOf:
            - $ref: '#/components/schemas/LastModdifiedCollections'
          description: Collections which the user have read access to.
      required:
        - srvDate
        - collections
    NotAcceptableFailedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
      required:
        - status
    NotFoundFailedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
      required:
        - status
    Profile:
      type: object
      properties:
        some_property:
          type: string
      description: >-
        Parameters describing body functioning relative to T1D + compensation
        parameters
      required:
        - some_property
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
    Properties:
      type: object
      properties:
        bgnow:
          $ref: '#/components/schemas/object'
        delta:
          $ref: '#/components/schemas/object'
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/object'
          x-cadl-name: object[]
        direction:
          $ref: '#/components/schemas/object'
        upbat:
          $ref: '#/components/schemas/object'
        iob:
          $ref: '#/components/schemas/object'
        cob:
          $ref: '#/components/schemas/object'
        pump:
          $ref: '#/components/schemas/object'
        loop:
          $ref: '#/components/schemas/object'
        bwp:
          $ref: '#/components/schemas/object'
        cage:
          $ref: '#/components/schemas/Cage'
        sage:
          $ref: '#/components/schemas/Sage'
        basal:
          $ref: '#/components/schemas/object'
        dbsize:
          $ref: '#/components/schemas/object'
        runtimestate:
          $ref: '#/components/schemas/RuntimeState'
      required:
        - runtimestate
    RuntimeState:
      type: object
      properties:
        state:
          type: string
      required:
        - state
    Sage:
      type: object
      properties:
        Sensor Start:
          $ref: '#/components/schemas/SensorStart'
        Sensor Change:
          $ref: '#/components/schemas/SensorChange'
        min:
          type: string
    SensorChange:
      type: object
      properties:
        found:
          type: boolean
        treatmentDate:
          type: integer
          format: int64
        age:
          type: integer
          format: int32
        days:
          type: integer
          format: int32
        hours:
          type: integer
          format: int32
        notes:
          type: string
        minFractions:
          type: integer
          format: int32
        display:
          type: string
        displayLong:
          type: string
        level:
          type: integer
          format: int32
    SensorStart:
      type: object
      properties:
        found:
          type: boolean
      required:
        - found
    Settings:
      type: object
      properties:
        some_property:
          type: string
      required:
        - some_property
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
    StatusResult:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/VersionResult'
        apiPermissions:
          $ref: '#/components/schemas/ApiPermissions'
      required:
        - version
        - apiPermissions
    Storage:
      type: object
      properties:
        type:
          type: string
          description: Type of storage engine used
        version:
          type: string
          description: Version of the storage engine
      required:
        - type
        - version
    Treatment:
      type: object
      properties:
        eventType:
          type: string
          description: |-
            The type of treatment event.
                    Note&#58; this field is immutable by the client (it cannot be updated or patched)
        glucose:
          type: string
          description: Current glucose.
        glucoseType:
          type: string
          description: Method used to obtain glucose, Finger or Sensor.
        units:
          type: string
          description: >-
            The units for the glucose value, mg/dl or mmol/l. It is strongly
            recommended to fill in this field when `glucose` is entered.
        carbs:
          type: number
          format: float
          description: Amount of carbs given.
        protein:
          type: number
          format: float
          description: Amount of protein given.
        fat:
          type: number
          format: float
          description: Amount of fat given.
        insulin:
          type: number
          format: float
          description: Amount of insulin, if any.
        duration:
          type: number
          format: float
          description: Duration in minutes.
        preBolus:
          type: number
          format: float
          description: How many minutes the bolus was given before the meal started.
        splitNow:
          type: number
          format: float
          description: Immediate part of combo bolus (in percent).
        splitExt:
          type: number
          format: float
          description: Extended part of combo bolus (in percent).
        percent:
          type: number
          format: float
          description: Eventual basal change in percent.
        absolute:
          type: number
          format: float
          description: Eventual basal change in absolute value (insulin units per hour).
        targetTop:
          type: number
          format: float
          description: Top limit of temporary target.
        targetBottom:
          type: number
          format: float
          description: Bottom limit of temporary target.
        profile:
          type: string
          description: Name of the profile to which the pump has been switched.
        reason:
          type: string
          description: >-
            For example the reason why the profile has been switched or why the
            temporary target has been set.
        notes:
          type: string
          description: Description/notes of treatment.
        enteredBy:
          type: string
          description: Who entered the treatment.
      required:
        - eventType
      allOf:
        - $ref: '#/components/schemas/DocumentBase'
    UnauthenticatedFailedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
      required:
        - status
    UnauthorizedFailedResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
      required:
        - status
    VersionResult:
      type: object
      properties:
        version:
          type: string
          description: The whole Nightscout instance version
        apiVersion:
          type: string
          description: API v3 subsystem version
        srvDate:
          type: integer
          format: int64
          description: Actual server date and time in UNIX epoch format
        storage:
          allOf:
            - $ref: '#/components/schemas/Storage'
          description: Type of storage engine used
      required:
        - version
        - apiVersion
        - srvDate
        - storage
    createdDocument:
      type: object
      properties:
        status:
          type: integer
          format: int32
        identifier:
          type: string
        lastModified:
          type: integer
          format: int64
      required:
        - status
        - identifier
        - lastModified
    object:
      type: object
      properties: {}
    updatedDocument:
      type: object
      properties:
        status:
          type: integer
          format: int32
        identifier:
          type: string
        isDeduplication:
          type: boolean
        deduplicatedIdentifier:
          type: string
      required:
        - status
        - identifier
  securitySchemes:
    AccessToken:
      type: apiKey
      in: query
      name: token
    JwtToken:
      type: http
      scheme: bearer
servers:
  - url: /api
    description: default endpoint
    variables: {}
